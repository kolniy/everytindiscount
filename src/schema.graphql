type Query {
  me: User!
  packagetypes: [PackageType!]!
  packages(packageTypeId: ID!): [Package!]!
  singlePackage(packageId: ID!): Package!
}

type Mutation {
  signup(data: signUpInput!): UserAuthPayload!
  signin(data: signInInput!): UserAuthPayload!
  resetUserPassword(password: String!): User!
  createPackageType(data: createPackageTypeInput): PackageType!
  deletePackageType(id: ID!): PackageType!
  updatePackageType(id: ID!, data: updatePackageTypeInput!): PackageType!
  createPackage(data: createPackageInput): Package!
  deletePackage(idOfPackageToBeDeleted: ID!): Package!
  updatePackage(idOfPackageToBeUpdated: ID!, data: updatePackageInput): Package!
  createPackagePlan(data: createPackagePlanInput): PackagePlan!
  updatePackagePlan(
    idOfPackagePlanToUpdated: ID!
    data: updatePackagePlanInput
  ): PackagePlan!
  deletePackagePlan(idOfPackagePlanToDelete: ID!): PackagePlan!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: Role
  password: String!
  createdpackagetype: [PackageType!]!
  createpackage: [Package!]!
  userrefcode: String
  referedby: String
}

type PackageType {
  id: ID!
  name: String!
  iconname: String!
  createdat: String!
  createdby: User!
}

type Package {
  id: ID!
  packagetype: PackageType
  packagename: String
  packageimage: String
  packagediscountpercard: String
  packagediscountperbanktransfer: String
  packagedescription: String
  packagelandingpageimage: String
  packagelogo: String
  createdBy: User
  packageplan: [PackagePlan!]!
}

type PackagePlan {
  id: ID!
  planname: String!
  plandescription: String!
  planprice: Int!
  createdBy: User!
  singlepackage: Package!
  createdat: String!
}

type UserAuthPayload {
  user: User!
  token: String!
}

input signUpInput {
  name: String!
  email: String!
  password: String!
  isAdmin: Boolean!
  referedby: String
}

input signInInput {
  email: String!
  password: String!
}

input createPackageInput {
  packagename: String!
  packageimage: String!
  packagediscountpercard: String!
  packagediscountperbanktransfer: String!
  packagedescription: String!
  packagelandingpageimage: String!
  packagelogo: String!
  packagetypeId: String!
}

input updatePackageInput {
  packagename: String
  packageimage: String
  packagediscountpercard: String!
  packagediscountperbanktransfer: String!
  packagedescription: String
  packagelandingpageimage: String
  packagelogo: String
}

input createPackagePlanInput {
  planname: String!
  plandescription: String!
  planprice: Int!
  idOfPackageToSaveTo: ID!
}

input updatePackagePlanInput {
  planname: String
  plandescription: String
  planprice: Int
}

input createPackageTypeInput {
  name: String!
  iconname: String!
}

input updatePackageTypeInput {
  name: String
  iconname: String
}

enum Role {
  user
  admin
}
